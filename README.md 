# Google Flights MCP Server

Um servidor MCP (Model Context Protocol) para busca de voos usando a SerpAPI do Google Flights. Este servidor permite que IAs busquem voos, aeroportos e obtenham insights sobre viagens de forma program√°tica.

## Caracter√≠sticas

- üõ´ **Busca de Voos**: Pesquise voos entre qualquer aeroporto do mundo
- üè¢ **Busca de Aeroportos**: Encontre aeroportos por nome, cidade ou c√≥digo IATA
- üìä **Insights Inteligentes**: An√°lise autom√°tica de voos por pre√ßo, dura√ß√£o, emiss√µes de carbono
- üåç **Global**: Suporte a m√∫ltiplas moedas e idiomas
- üîß **Configur√°vel**: Classe de viagem, n√∫mero de passageiros, paradas, pre√ßo m√°ximo
- ü§ñ **IA-Ready**: Projetado para integra√ß√£o com assistentes de IA

## Instala√ß√£o

### Pr√©-requisitos

- Node.js 18+
- Conta SerpAPI (https://serpapi.com)
- Chave da API SerpAPI

### Configura√ß√£o Local

1. Clone o reposit√≥rio:
```bash
git clone https://github.com/yourusername/mcp-google-flights.git
cd mcp-google-flights
```

2. Instale as depend√™ncias:
```bash
npm install
```

3. Configure as vari√°veis de ambiente:
```bash
cp .env.example .env
```

Edite o arquivo `.env` e adicione sua chave da SerpAPI:
```
SERP_API_KEY=sua_chave_serpapi_aqui
```

4. Compile o projeto:
```bash
npm run build
```

5. Execute o servidor:
```bash
npm start
```

### Usando Docker

1. Build da imagem:
```bash
docker build -t mcp-google-flights .
```

2. Execute o container:
```bash
docker run -e SERP_API_KEY=sua_chave_serpapi_aqui mcp-google-flights
```

## Ferramentas Dispon√≠veis

### 1. search_flights

Busca voos entre dois aeroportos.

**Par√¢metros:**
- `departure_id` (obrigat√≥rio): C√≥digo IATA do aeroporto de origem
- `arrival_id` (obrigat√≥rio): C√≥digo IATA do aeroporto de destino  
- `outbound_date` (obrigat√≥rio): Data de ida (YYYY-MM-DD)
- `return_date` (opcional): Data de volta (YYYY-MM-DD)
- `currency` (opcional): C√≥digo da moeda (USD, BRL, EUR, etc.)
- `language` (opcional): Idioma dos resultados (en, pt, es, etc.)
- `adults` (opcional): N√∫mero de adultos (1-9)
- `children` (opcional): N√∫mero de crian√ßas (0-8)
- `infants` (opcional): N√∫mero de beb√™s (0-8)
- `travel_class` (opcional): Classe de viagem (1=Economy, 2=Premium, 3=Business, 4=First)
- `max_price` (opcional): Pre√ßo m√°ximo
- `stops` (opcional): Filtro de paradas (0=direto, 1=1 parada, 2=2+ paradas)

**Exemplo:**
```json
{
  "departure_id": "GRU",
  "arrival_id": "JFK", 
  "outbound_date": "2025-07-15",
  "return_date": "2025-07-22",
  "currency": "BRL",
  "language": "pt",
  "adults": 2,
  "travel_class": "1"
}
```

### 2. search_airports

Busca aeroportos por nome, cidade ou c√≥digo.

**Par√¢metros:**
- `query` (obrigat√≥rio): Termo de busca
- `language` (opcional): Idioma dos resultados

**Exemplo:**
```json
{
  "query": "S√£o Paulo",
  "language": "pt"
}
```

### 3. get_flight_insights

Analisa dados de voos e fornece recomenda√ß√µes.

**Par√¢metros:**
- `flights_data` (obrigat√≥rio): Dados dos voos em JSON
- `criteria` (opcional): Crit√©rio de an√°lise (price, duration, emissions, comfort)

## Integra√ß√£o com IA

### Claude Desktop

Adicione ao seu `claude_desktop_config.json`:

```json
{
  "mcpServers": {
    "google-flights": {
      "command": "node",
      "args": ["/caminho/para/mcp-google-flights/dist/index.js"],
      "env": {
        "SERP_API_KEY": "sua_chave_serpapi_aqui"
      }
    }
  }
}
```

### n8n Community Node

Para usar como community node no n8n:

1. Publique este projeto no npm
2. No n8n, v√° em Settings > Community Nodes
3. Instale usando o nome do pacote
4. Configure sua chave SerpAPI nas credenciais

### Outros Clientes MCP

Este servidor segue o protocolo MCP padr√£o e pode ser usado com qualquer cliente compat√≠vel.

## Exemplos de Uso

### Busca Simples de Voos
```bash
# Exemplo usando curl (se executando como API)
curl -X POST http://localhost:3000/search_flights \
  -H "Content-Type: application/json" \
  -d '{
    "departure_id": "GRU",
    "arrival_id": "CDG",
    "outbound_date": "2025-08-15",
    "currency": "BRL"
  }'
```

### Prompt para IA
```
Encontre voos de S√£o Paulo para Paris saindo em 15 de agosto de 2025, 
voltando em 22 de agosto, para 2 adultos, classe executiva, 
moeda BRL. Analise as op√ß√µes e recomende a melhor considerando 
pre√ßo e dura√ß√£o.
```

## Estrutura do Projeto

```
mcp-google-flights/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ index.ts          # Servidor MCP principal
‚îú‚îÄ‚îÄ dist/                 # C√≥digo compilado
‚îú‚îÄ‚îÄ package.json          # Depend√™ncias e scripts
‚îú‚îÄ‚îÄ tsconfig.json         # Configura√ß√£o TypeScript
‚îú‚îÄ‚îÄ Dockerfile            # Container Docker
‚îú‚îÄ‚îÄ .env.example          # Exemplo de vari√°veis de ambiente
‚îî‚îÄ‚îÄ README.md            # Este arquivo
```

## Desenvolvimento

### Scripts Dispon√≠veis

```bash
npm run dev          # Executar em modo desenvolvimento
npm run build        # Compilar TypeScript
npm start           # Executar vers√£o compilada
npm test            # Executar testes
```

### Estrutura de Resposta

#### Busca de Voos
```json
{
  "summary": {
    "total_flights_found": 15,
    "price_range": {
      "min": 1200,
      "max": 4500,
      "currency": "BRL"
    },
    "airlines": ["LATAM", "GOL", "Air France"],
    "search_parameters": {
      "route": "GRU ‚Üí CDG",
      "departure_date": "2025-08-15",
      "return_date": "2025-08-22",
      "passengers": {
        "adults": 2,
        "children": 0,
        "infants": 0
      }
    }
  },
  "flights": [
    {
      "airline": "LATAM",
      "price": 2350,
      "currency": "BRL",
      "total_duration": 720,
      "departure_time": "2025-08-15T22:30:00",
      "arrival_time": "2025-08-16T14:15:00",
      "departure_airport": {
        "name": "S√£o Paulo Guarulhos International Airport",
        "id": "GRU"
      },
      "arrival_airport": {
        "name": "Charles de Gaulle Airport",
        "id": "CDG"
      },
      "stops": 0,
      "carbon_emissions": {
        "this_flight": 850,
        "typical_for_this_route": 920,
        "difference_percent": -8
      }
    }
  ]
}
```

#### Busca de Aeroportos
```json
{
  "query": "S√£o Paulo",
  "total_airports_found": 3,
  "airports": [
    {
      "id": "GRU",
      "name": "S√£o Paulo Guarulhos International Airport",
      "city": "S√£o Paulo",
      "country": "Brazil",
      "country_code": "BR"
    },
    {
      "id": "CGH",
      "name": "S√£o Paulo Congonhas Airport",
      "city": "S√£o Paulo", 
      "country": "Brazil",
      "country_code": "BR"
    }
  ]
}
```

### Tratamento de Erros

O servidor trata diversos tipos de erro:

- **Valida√ß√£o de entrada**: Par√¢metros inv√°lidos ou ausentes
- **Limites da API**: Rate limiting da SerpAPI
- **Conex√£o**: Problemas de rede
- **Dados**: Respostas inesperadas da API

Exemplo de resposta de erro:
```json
{
  "error": "C√≥digo do aeroporto de origem deve ter pelo menos 3 caracteres",
  "code": "VALIDATION_ERROR"
}
```

## Configura√ß√£o Avan√ßada

### Vari√°veis de Ambiente

```bash
# Obrigat√≥rio
SERP_API_KEY=sua_chave_serpapi

# Opcional
PORT=3000
LOG_LEVEL=info
CACHE_TTL=300
MAX_RESULTS=50
DEFAULT_CURRENCY=USD
DEFAULT_LANGUAGE=en
```

### Limites da SerpAPI

- **Plano gratuito**: 100 buscas/m√™s
- **Plano pago**: A partir de $50/m√™s para 5.000 buscas
- **Rate limiting**: M√°ximo 1 request/segundo

### C√≥digos de Aeroportos IATA Populares

| C√≥digo | Aeroporto | Cidade |
|--------|-----------|---------|
| GRU | Guarulhos | S√£o Paulo, Brasil |
| GIG | Gale√£o | Rio de Janeiro, Brasil |
| BSB | Bras√≠lia | Bras√≠lia, Brasil |
| JFK | John F. Kennedy | Nova York, EUA |
| LAX | Los Angeles | Los Angeles, EUA |
| LHR | Heathrow | Londres, Reino Unido |
| CDG | Charles de Gaulle | Paris, Fran√ßa |
| NRT | Narita | T√≥quio, Jap√£o |
| DXB | Dubai International | Dubai, EAU |

## Casos de Uso

### 1. Assistente de Viagem Pessoal
```
"Encontre voos baratos de S√£o Paulo para Londres em dezembro, 
com m√°ximo de 1 parada, para 2 pessoas"
```

### 2. Compara√ß√£o de Pre√ßos
```
"Compare pre√ßos de voos GRU-JFK para diferentes datas em julho, 
mostre a varia√ß√£o de pre√ßos"
```

### 3. An√°lise de Sustentabilidade
```
"Quais s√£o os voos com menor emiss√£o de carbono de Bras√≠lia 
para Buenos Aires?"
```

### 4. Planejamento Corporativo
```
"Busque voos executivos de S√£o Paulo para Frankfurt, 
sa√≠da segunda-feira manh√£, volta sexta-feira tarde"
```

## Solu√ß√£o de Problemas

### Erro: "SERP_API_KEY n√£o encontrada"
- Verifique se o arquivo `.env` existe
- Confirme que a vari√°vel est√° definida corretamente
- Reinicie a aplica√ß√£o ap√≥s alterar o `.env`

### Erro: "Limite de API excedido"
- Verifique seu plano SerpAPI
- Considere implementar cache para reduzir chamadas
- Monitore o uso da API

### Erro: "Aeroporto n√£o encontrado"
- Use c√≥digos IATA de 3 letras v√°lidos
- Verifique a grafia do c√≥digo do aeroporto
- Use a ferramenta `search_airports` para encontrar c√≥digos

### Performance Lenta
- Verifique sua conex√£o com internet
- SerpAPI pode ter lat√™ncia vari√°vel
- Considere cache local para buscas frequentes

## Contribui√ß√£o

1. Fork o reposit√≥rio
2. Crie uma branch para sua feature (`git checkout -b feature/nova-feature`)
3. Commit suas mudan√ßas (`git commit -am 'Adiciona nova feature'`)
4. Push para a branch (`git push origin feature/nova-feature`)
5. Abra um Pull Request

### Padr√µes de C√≥digo

- Use TypeScript strict mode
- Siga as conven√ß√µes ESLint
- Adicione testes para novas features
- Documente mudan√ßas no README

## Roadmap

- [ ] Cache inteligente de resultados
- [ ] Suporte a m√∫ltiplas APIs de voos
- [ ] Interface web para testes
- [ ] M√©tricas e monitoramento
- [ ] Suporte a reservas (webhook)
- [ ] Integra√ß√£o com calend√°rios
- [ ] Alertas de pre√ßo
- [ ] API GraphQL

## Licen√ßa

MIT License - veja o arquivo [LICENSE](LICENSE) para detalhes.

## Suporte

- **Issues**: https://github.com/yourusername/mcp-google-flights/issues
- **Documenta√ß√£o**: https://github.com/yourusername/mcp-google-flights/wiki
- **SerpAPI Docs**: https://serpapi.com/google-flights-api

## Agradecimentos

- [SerpAPI](https://serpapi.com) pela API do Google Flights
- [ModelContextProtocol](https://github.com/modelcontextprotocol) pelo protocolo MCP
- Comunidade open source

---

**Nota**: Este projeto n√£o √© oficialmente afiliado com Google, SerpAPI ou n8n. √â um projeto independente para facilitar a integra√ß√£o com APIs de busca de voos.